<template>
  
  <div class="page" data-name="home">
    <!-- Top Navbar -->
    <div class="navbar navbar-large">
      <div class="navbar-bg"></div>
      <div class="navbar-inner">
        <div class="title">
          <span>Driver</span> Stats
        </div>

        <div class="title-large">
          <div class="title-large-text">
            <span>Driver</span> Stats
          </div>

        </div>
      </div>
    </div>


    <!-- Scrollable page content-->
    <div class="page-content">

      <!-- <a href="#" class="button button-fill login-screen-open" data-login-screen="#my-login-screen">Login Screen</a> -->

      <div class="block welcome">
            <h2>Welcome to Driver Stats!</h2>
            <p>This app is designed to help you track and analyze your driver's performance.</p>
            <a href="#" class="button button-fill button-raised" style="padding: 20px;">Start Tracking</a>
      </div>

      <div class="block-title">Hello, <span>Arthur</span>!</div>
      <div class="block card-flex">
        <div class="card">
          <div class="card-header">Trips</div>
          <div class="card-content">${cardTrips}<span class="card-${getCardPercentageColor(cardTripsPercentage)}">(${cardTripsPercentage}%)</span></div>
        </div>
        <div class="card">
          <div class="card-header">Billed (R$)</div>
          <div class="card-content">${cardBilled}<span class="card-${getCardPercentageColor(cardBilledPercentage)}">(${cardBilledPercentage}%)</span></div>
        </div>
        <div class="card">
          <div class="card-header">Expensed (R$)</div>
          <div class="card-content">${cardExpensed}<span class="card-${getCardPercentageColor(cardExpensedPercentage)}">(${cardExpensedPercentage}%)</span></div>
        </div>
        <div class="card">
          <div class="card-header">Mileage (KM)</div>
          <div class="card-content">${cardMilleage}<span class="card-${getCardPercentageColor(cardMilleagePercentage)}">(${cardMilleagePercentage}%)</span></div>
        </div>
      </div>

      <div class="block-title">Monthly / Weekly Driver Statistics</div>
      <div class=" block charts">
        <div class="pie-chart">
          <canvas id="monthlyPieChart"></canvas>
        </div>
        <div class="pie-chart">
          <canvas id="weeklyPieChart"></canvas>
        </div>
      </div>

      <div class="block-title">Weekly Hour Worked Statistics</div>
      <div class="block charts">
        <div class="bar-chart">
          <canvas id="weeklyBarChart"></canvas>
        </div>
      </div>

      <div class="block-title">Annually Driver Statistics</div>
      <div class=" block charts">
        <div class="bar-chart">
          <canvas id="annuallyLineChart"></canvas>
        </div>
      </div>

      <div class="block-title">Last Registries</div>
      <div class="block data-table">
        <table>
          <thead>
            <tr>
              <th class="numeric-cell">#</th>
              <th class="numeric-cell">Created</th>
              <th class="numeric-cell">Closed</th>
              <th class="numeric-cell">Trips</th>
              <th class="numeric-cell">Billed (R$)</th>
              <th class="numeric-cell">Mileage (KM)</th>
              <th class="button-cell">Details</th>
            </tr>
          </thead>
          <tbody>
            ${registries.value.map((registry) => {
              registryTableIndex++;
              const mileage = registry.finalMileage - registry.initialMileage;
              const closedAt = registry.closedAt ? registry.closedAt.toLocaleString() : undefined;
              return $h`
              <tr>
                <td class="numeric-cell">${registryTableIndex}</td>
                <td class="numeric-cell">${registry.createdAt.toLocaleString()}</td>
                <td class="numeric-cell">${closedAt}</td>
                <td class="numeric-cell">${registry.trips}</td>
                <td class="numeric-cell">${registry.billed}</td>
                <td class="numeric-cell">${mileage}</td>
                <td class="button-cell"><a href="/registry/${registry.id}/" class="button button-fill">+</a></td>
              </tr>
            `
            })}
          </tbody>
        </table>
        <div class="data-table-footer">
          <div class="data-table-rows-select">Per page:<div class="input input-dropdown">
              <select>
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="25">25</option>
                <option value="all">All</option>
              </select>
            </div>
          </div>
          <div class="data-table-pagination">
            <span class="data-table-pagination-label">1-5 of 10</span>
            <a href="#" class="link disabled">
              <i class="icon icon-prev color-gray"></i>
            </a>
            <a href="#" class="link">
              <i class="icon icon-next color-gray"></i>
            </a>
          </div>
        </div>
      </div>

      <div class="m-bottom"></div>

    </div>
  </div>
</template>

<script>
  export default (props, { $f7, $store }) => {
    const registries = $store.getters.registries;
    const expenses = $store.getters.expenses;
    var registryTableIndex = 0;

    var cardTrips = 0;
    var cardBilled = 0;
    var cardExpensed = 0;
    var cardMilleage = 0;

    const oneMonthAgo = new Date();
    const twoMonthsAgo = new Date();

    oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);
    twoMonthsAgo.setMonth(twoMonthsAgo.getMonth() - 2);

    // Filter registries from one month ago
    const filteredRegistries = registries.value.filter((registry) => { return registry.createdAt >= oneMonthAgo; });

    filteredRegistries.forEach((registry) => {
        cardTrips += registry.trips;
        cardBilled += registry.billed;
        cardMilleage += registry.finalMileage - registry.initialMileage;
    });

    const filteredExpenses = expenses.value.filter((expense) => { return expense.date >= oneMonthAgo; });

    filteredExpenses.forEach((expense) => {
      cardExpensed += expense.amount;
    });

    // Calculate the percentages
    const filteredRegistriesTwoMonths = registries.value.filter((registry) => { return registry.createdAt >= twoMonthsAgo && registry.createdAt <= oneMonthAgo; });

    let totalTripsTwoMonths = 0;
    let totalBilledTwoMonths = 0;
    let totalMilleageTwoMonths = 0;

    filteredRegistriesTwoMonths.forEach((registry) => {
      totalTripsTwoMonths += registry.trips;
      totalBilledTwoMonths += registry.billed;
      totalMilleageTwoMonths += registry.finalMileage - registry.initialMileage;
    });

    let totalExpensedTwoMonths = 0;

    const filteredExpensesTwoMonths = expenses.value.filter((expense) => { return expense.createdAt >= twoMonthsAgo && expense.createdAt <= oneMonthAgo; });

    if (filteredExpensesTwoMonths.length > 0) {
      totalExpensedTwoMonths = filteredExpensesTwoMonths.reduce((total, expense) => total + expense.amount, 0);
    }

    const cardTripsPercentage = (totalTripsTwoMonths > 0) ? new Intl.NumberFormat(undefined, {minimumFractionDigits: 2}).format((cardTrips / totalTripsTwoMonths) * 100) : 0;
    const cardBilledPercentage = (totalBilledTwoMonths > 0) ? new Intl.NumberFormat(undefined, {minimumFractionDigits: 2}).format((cardBilled / totalBilledTwoMonths) * 100) : 0;
    const cardMilleagePercentage = (totalMilleageTwoMonths > 0) ? new Intl.NumberFormat(undefined, {minimumFractionDigits: 2}).format((cardMilleage / totalMilleageTwoMonths) * 100) : 0;

    const cardExpensedPercentage = (totalExpensedTwoMonths > 0) ? new Intl.NumberFormat(undefined, {minimumFractionDigits: 2}).format((cardExpensed / totalExpensedTwoMonths) * 100) : 0;

    const getCardPercentageColor = (percentage) => {
      if (parseFloat(percentage) > 0) {
        return "positive";
      } else if(parseFloat(percentage) == 0){
        return "neutral";
      } else {
        return "negative";
      }
    }

  return $render;
}

</script>


